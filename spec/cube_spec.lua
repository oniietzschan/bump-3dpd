local cube = require('bump-3dpd').cube

describe('bump.cube', function()
  describe('detectCollision', function()
    local detect = cube.detectCollision

    describe('when item is static', function()
      describe('when itemCube does not intersect otherCube', function()
        it('returns nil', function()
          local c = detect(0,0,0,1,1,1, 5,5,5,1,1,1, 0,0,0)
          assert.is_nil(c)
        end)
      end)

      describe('when itemCube overlaps otherCube', function()
        it('returns overlaps, normal, move, ti, diff, itemCube, otherCube', function()
          local c = detect(0,0,0,7,6,8, 5,5,0,1,1,1, 0,0,0)

          assert.is_true(c.overlaps)
          assert.equals(c.ti, -2)
          assert.same(c.move, {x = 0, y = 0, z = 0})
          assert.same(c.normal, {x = 0, y = -1, z = 0})
          assert.same(c.distance, 22.5)
        end)
      end)
    end)

    describe('when item is moving', function()
      describe('when itemCube does not intersect otherCube', function()
        it('returns nil', function()
          local c = detect(0,0,0,1,1,1, 5,5,5,1,1,1, 3,3,3)
          assert.is_nil(c)
        end)
      end)

      describe('when itemCube intersects otherCube', function()
        it('detects collisions from the left', function()
          local c = detect(1,1,1,1,1,1, 5,0,0,1,1,1, 6,0,0)
          assert.equal(c.ti, 0.6)
          assert.same(c.normal, {x = -1, y = 0, z = 0})
        end)

        it('detects collisions from the right', function()
          local c = detect(6,0,0,1,1,1, 1,0,0,1,1,1, 1,1,1)
          assert.is_false(c.overlaps)
          assert.equal(c.ti, 0.8)
          assert.same(c.normal, {x = 1, y = 0, z = 0})
        end)

        it('detects collisions from the top', function()
          local c = detect(0,0,0,1,1,1, 0,4,0,1,1,1, 0,5,0)
          assert.is_false(c.overlaps)
          assert.equal(c.ti, 0.6)
          assert.same(c.normal, {x = 0, y = -1, z = 0})
        end)

        it('detects collisions from the bottom', function()
          local c = detect(0,4,0,1,1,1, 0,0,0,1,1,1, 0,-1,0)
          assert.is_false(c.overlaps)
          assert.equal(c.ti, 0.6)
          assert.same(c.normal, {x = 0, y = 1, z = 0})
        end)
      end)

      it('does not get caught by nasty corner cases', function()
        assert.is_nil(detect(0,16,0,16,16,16, 16,0,0,16,16,16, -1,15,15))
      end)
    end)
  end)
end)
